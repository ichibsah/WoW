
CurseProfilerDB = ""
CurseProfilerDebugDB = nil
